/*
 *	Copyright (c) 2011-2015 NinevehGL. More information at: http://nineveh.gl
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in
 *	all copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *	THE SOFTWARE.
 */

#import "NGLRuntime.h"

/*!
 *					The NinevehGL Error API.
 *
 *					NGLError stores the last error generated by NinevehGL processing and later show the
 *					error on the console panel.
 *
 *					Every error instance has two elements:
 *
 *						- A header;
 *						- A message.
 *
 *					The header is not taken as an error, it's more like a generic information. Changing
 *					the header doesn't generate any error. On the other hand, the message represents a real
 *					new error. At every change in the message a new error is generated and a property
 *					indicates that there is an unshown error waiting to appear.
 *
 *					When the error is shown at the console panel, that property returns to null state
 *					indicating there is no error waiting to be showed.
 */
@interface NGLError : NSObject
{
@private
	NSString			*_header;
	NSString			*_message;
	
	BOOL				_hasError, _hadError;
}

/*!
 *					Indicates if there is a non-shown error in this NGLError instance.
 */
@property (nonatomic, readonly) BOOL hasError;

/*!
 *					Indicates if this class had at least one valid error.
 */
@property (nonatomic, readonly) BOOL hadError;

/*!
 *					The message that will be displayed in the error's header. Setting the header is not
 *					considered the creation of a new error.
 */
@property (nonatomic, copy) NSString *header;

/*!
 *					The message that describes the error. Setting the message automatically creates a
 *					new error, but it does not show it yet.
 */
@property (nonatomic, copy) NSString *message;

/*!
 *					Initiates an error class with a header in it.
 *
 *					This method initializes an error instance and set a header. The header is not
 *					considered an error and can be changed at any time.
 *
 *	@param			header
 *					A NSString containing the header content.
 *
 *	@result			A new initialized instance.
 */
- (id) initWithHeader:(NSString *)header;

/*!
 *					Commits the error and shows it on the console panel.
 *
 *					The error will be displayed using the header and message strings, with a line break
 *					between them.
 */
- (void) showError;

/*!
 *					Returns an autorelease instance of NGLError.
 *
 *					This creates a new empty instance of NGLError.
 *
 *	@result			A NGLError autoreleased instance.
 */
+ (id) error;

/*!
 *					Returns an autorelease instance of NGLError with a header in it.
 *
 *					This creates a new instance of NGLError and puts a header in it. Although this new
 *					instance will have a header, it will have no error message.
 *
 *	@param			headerString
 *					A NSString containing the header to this error instance.
 *
 *	@result			A NGLError autoreleased instance.
 */
+ (id) errorWithHeader:(NSString *)headerString;

/*!
 *					Returns an autorelease instance of NGLError with an error message in it.
 *
 *					This creates a new instance of NGLError with a header and a message in it. As the 
 *					error message is considered a true error, this instance will be ready to show the
 *					error at the console panel.
 *
 *	@param			headerString
 *					A NSString containing the header to this error instance.
 *
 *	@param			messageString
 *					A NSString containing the message to this error instance.
 *
 *	@result			A NGLError autoreleased instance.
 */
+ (id) errorWithHeader:(NSString *)headerString andMessage:(NSString *)messageString;

/*!
 *					Generates an error instantly at the console panel.
 *
 *					This method doesn't return an autoreleased instance, instead it will automatically 
 *					generates an error at the console panel based on a header and a message.
 *
 *	@param			headerString
 *					A NSString containing the header to this error instance.
 *
 *	@param			messageString
 *					A NSString containing the message to this error instance.
 *
 *	@result			A NGLError autoreleased instance.
 */
+ (void) errorInstantlyWithHeader:(NSString *)headerString andMessage:(NSString *)messageString;

@end