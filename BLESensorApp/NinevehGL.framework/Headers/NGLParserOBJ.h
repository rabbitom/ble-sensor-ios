/*
 *	Copyright (c) 2011-2015 NinevehGL. More information at: http://nineveh.gl
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in
 *	all copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *	THE SOFTWARE.
 */

#import "NGLRuntime.h"
#import "NGLParserMesh.h"
#import "NGLParserMTL.h"

/*!
 *					<strong>(Internal only)</strong> Loads and parses files of format WaveFront
 *					Objects (.obj) and their pairs WaveFront Material (.mtl).
 *
 *					Each OBJ file loaded by NGLParserOBJ represents only one single mesh,
 *					independently of how many groups it has (the word OBJ file represents two or
 *					more physical files: a .obj and one or more .mtl files).
 *
 *					You can adjust the output data specifying if you want to:
 *
 *						- Resize the vertices position from the original mesh;
 *						- Rescale the entire mesh;
 *						- Centralize the mesh on the orgin (0,0,0).
 *
 *					NGLParserOBJ has being tested with .obj files generated by the following softwares:
 *
 *						- 3Ds Max
 *						- Maya
 *						- SoftImage XSI
 *						- LightWave
 *						- Cinema4D
 *						- Modo
 *						- Blender
 *						- ZBrush
 *						- MudBox
 *						- Poser
 *						- Rhino
 *						- VUE
 *						- RealFlow
 *						- Cheetah
 *						- Google SketchUp
 *
 *					The supported features for the current NinevehGL version are:
 *
 *						- Geometry tags: v, vt, vn, g, f;
 *						- Material tags: Ka (r g b), Kd (r g b), Ks (r g b), Ke (r g b), d (factor),
 *							Tr, Tf (r g b), Ni, Ns, map_Ka, map_Kd, map_Ks, map_Ke, map_d, map_Bump, map_Ns;
 *						- All polygons types (triangle, quadrangle, pentagon, â€¦);
 *						- Multiple material files;
 *						- 3DMax's inverted face indexing.
 *	
 *					NGLParserOBJ works with an Error API which can inform about the problems in the .obj
 *					or .mtl files and also indicates a possible solution to the error. it's important that
 *					you pay atention to some rules:
 *
 *						- Vertex data must have at least 3 values (x y z);
 *						- Texture data must have at least 2 values (u v);
 *						- Normal data must have at least 3 values (x y z);
 *						- The unique faces cannot exceed 65535;
 *						- There is no support to any kind of pre-processed or pre-compiled third
 *							files like: .mpc, .mps, .mpb .cxc, .cxs, .cxb, .rfl, .rla.
 *	
 *					Even being the NGLParserOBJ a fast parser, you should remember some important tips to
 *					boost its performance:
 *
 *						- OBJ files with only triangles in it will be processed faster;
 *						- OBJ files without groups will be processed faster.
 */
@interface NGLParserOBJ : NGLParserMesh
{
@private
	// Helpers
	UInt32			_lines;
	NSString				*_finalPath;
	NSMutableDictionary		*_faceStore;
	NSArray					*_cuted;
	const char				*_prefix;
	unsigned char			_cutedCount;
	
	// Caches
	BOOL					_sCache;
	
	// Groups
	NGLivec3				*_groups;
	int						_gCount;
	UInt32			_currentGrp;

	// Materials
	NGLParserMTL			*_mtlParser;
}

@end