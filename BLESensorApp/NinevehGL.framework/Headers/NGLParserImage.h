/*
 *	Copyright (c) 2011-2015 NinevehGL. More information at: http://nineveh.gl
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in
 *	all copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *	THE SOFTWARE.
 */

#import "NGLRuntime.h"
#import "NGLFunctions.h"
#import "NGLCoreEngine.h"

/*!
 *					Instructs about which optimized format was used.
 *
 *					The optimized pixel format will be used to instruct OpenGL's core.
 *
 *	@see			NGLParserImage::optimized
 *
 *	@var			NGLImageCompressionRGBA
 *					Represents unoptimized format, which use 4 bytes per pixel.
 *	
 *	@var			NGLImageCompressionRGB565
 *					Represents 2bpp formats which uses 5 bits to red channel, 6 to green and 5 to blue.
 *
 *	@var			NGLImageCompressionRGBA4444
 *					Represents 2bpp formats which uses 4 bits for each channel: red, green, blue and alpha.
 *
 *	@var			NGLImageCompressionPVRTC2
 *					Represents 2bpp formats from PVRTC.
 *
 *	@var			NGLImageCompressionPVRTC4
 *					Represents 4bpp formats from PVRTC.
 */
typedef enum
{
	NGLImageCompressionRGBA,
	NGLImageCompressionRGB565,
	NGLImageCompressionRGBA4444,
	NGLImageCompressionPVRTC2,
	NGLImageCompressionPVRTC4,
} NGLImageCompression;

/*!
 *					Creates an UIImage from pixel data.
 *	
 *					This method will return an autoreleased instance of UIImage.
 *
 *	@param			size
 *					A pointer to the pixel data.
 *
 *	@param			scale
 *					The height in pixels.
 *
 *	@param			data
 *					The device's scale, used in iOS Retina Display.
 *
 *	@result			An autoreleased instance of UIImage.
 */
NGL_API UIImage *nglImageFromData(CGSize size, float scale, unsigned char *data);

/*!
 *					<strong>(Internal only)</strong> Extracts the binary pixel data from an image file.
 *
 *					This class uses UIImage to load the image, so NGLParserImage is subordinate to the
 *					UIImage supported formats and extensions. These files are:
 *
 *						- Tagged Image File Format (.tiff, .tif);
 *						- Joint Photographic Experts Group (.jpg, .jpeg);
 *						- Graphic Interchange Format (.gif);
 *						- Portable Network Graphic (.png);
 *						- Windows Bitmap Format (.bmp, .bmpf);
 *						- Windows Icon Format (.ico);
 *						- Windows Cursor (.cur);
 *						- XWindow bitmap (.xbm).
 *
 *					An important feature of NGLParserImage class is the hability to convert images to
 *					the optimized color formats with 2bpp.
 *
 *					OpenGL works with this optimized format to improve the render performance. These
 *					formats use 2 bytes per pixel rather than 4 bytes, as is common in the image files.
 *
 *					This class also supports PVRTC compressed image files, even those files without the
 *					traditional header, as it happens with the files generated by the Apple's Texture Tool.
 *					The PVRTC files aren't converted to the 2bpp formats because they are already optimized.
 */
@interface NGLParserImage : NSObject
{
@private
	int						_width;
	int						_height;
	int						_length;
	
	NGLImageCompression		_optimized;
	
	void					*_data;
}

/*!
 *					The final width of the parsed binary image. This value is given in pixels.
 */
@property (nonatomic, readonly) int width;

/*!
 *					The final height of the parsed binary image. This value is given in pixels.
 */
@property (nonatomic, readonly) int height;

/*!
 *					The final length of array of pixels.
 */
@property (nonatomic, readonly) int length;

/*!
 *					The final data of the parsed binary image. This is a pointer to and array of
 *					pixels, starting upside left to downside right.
 */
@property (nonatomic, readonly) void *data;

/*!
 *					The final color space which the binary data is using.
 */
@property (nonatomic, readonly) NGLImageCompression optimized;

/*!
 *					Initializes and constructs a pixel data with the correct orientation to OpenGL
 *					based on an UIImage.
 *
 *					This method will construct and prepare all the outputs. Including the convertion to
 *					the OpenGL orientation. Besides you can choose between using or not the optimized pixel
 *					format. If you choose to optimize, it will follow the global color format to define which
 *					optimized format is better: with or without alpha channel.
 *
 *	@param			uiImage
 *					An UIImage instance to be parsed.
 *
 *	@param			optimize
 *					This parameter chooses if the final pixel data will be in the optimized format or not.
 *
 *	@result			A new initialized instance.
 */
- (id) initWithImage:(UIImage *)uiImage optimize:(BOOL)optimize;

/*!
 *					Initializes and constructs a pixel data based on a compressed PVRTC image file.
 *
 *					This method will construct and prepare all outputs. The PVRTC image should be in
 *					upside down format, because this method will not change the pixel data from this kind
 *					of file.
 *
 *	@param			data
 *					The NSData from the file.
 *
 *	@result			A new initialized instance.
 */
- (id) initWithPVRTC:(NSData *)data;

/*!
 *					Constructs a pixel data with the correct orientation to OpenGL based on an UIImage.
 *
 *					This method will construct and prepare all the outputs. Including the convertion to
 *					the OpenGL orientation. Besides you can choose between using or not the optimized pixel
 *					format. If you choose to optimize, it will follow the global color format to define which
 *					optimized format is better: with or without alpha channel.
 *
 *	@param			uiImage
 *					An UIImage instance to be parsed.
 *
 *	@param			optimize
 *					This parameter chooses if the final pixel data will be in the optimized format or not.
 */
- (void) parseImage:(UIImage *)uiImage optimize:(BOOL)optimize;

/*!
 *					Constructs a pixel data based on a compressed PVRTC image file.
 *
 *					This method will construct and prepare all outputs. The PVRTC image should be in
 *					upside down format, because this method will not change the pixel data from this kind
 *					of file.
 *
 *	@param			data
 *					The NSData from the file.
 */
- (void) parsePVRTC:(NSData *)data;

@end